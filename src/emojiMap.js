/*
 * This file contains the Map of word --> emoji substitutions.
 */

let dictionary = new Map();
dictionary.set("allumeuse", "ğŸŒ¸");
dictionary.set("babtou", "ğŸŒ¸");
dictionary.set("bamboula", "ğŸŒ¸");
dictionary.set("bÃ¢tard", "ğŸŒ¸");
dictionary.set("bÃ¢tard noir", "ğŸŒ¸");
dictionary.set("bÃ©casse", "ğŸŒ¸");
dictionary.set("bimbo", "ğŸŒ¸");
dictionary.set("blondasse", "ğŸŒ¸");
dictionary.set("bobonne", "ğŸŒ¸");
dictionary.set("bonasse", "ğŸŒ¸");
dictionary.set("boniche", "ğŸŒ¸");
dictionary.set("boucaque", "ğŸŒ¸");
dictionary.set("bouffeur de chiens", "ğŸŒ¸");
dictionary.set("bouffeuse de chiens", "ğŸŒ¸");
dictionary.set("bougnoule", "ğŸŒ¸");
dictionary.set("cagole", "ğŸŒ¸");
dictionary.set("catin", "ğŸŒ¸");
dictionary.set("chagnasse", "ğŸŒ¸");
dictionary.set("chaudasse", "ğŸŒ¸");
dictionary.set("chinetoque", "ğŸŒ¸");
dictionary.set("ching chong", "ğŸŒ¸");
dictionary.set("connard", "ğŸŒ¸");
dictionary.set("connasse", "ğŸŒ¸");
dictionary.set("crouille", "ğŸŒ¸");
dictionary.set("dÃ©bile", "ğŸŒ¸");
dictionary.set("donzelle", "ğŸŒ¸");
dictionary.set("enculÃ©", "ğŸŒ¸");
dictionary.set("enculer", "ğŸŒ¸");
dictionary.set("fais pas ta meuf", "ğŸŒ¸");
dictionary.set("fatma", "ğŸŒ¸");
dictionary.set("FDP", "ğŸŒ¸");
dictionary.set("fille de joie", "ğŸŒ¸");
dictionary.set("fille facile", "ğŸŒ¸");
dictionary.set("fille lÃ©gÃ¨re", "ğŸŒ¸");
dictionary.set("fils de pute", "ğŸŒ¸");
dictionary.set("fils de putain", "ğŸŒ¸");
dictionary.set("fiotte", "ğŸŒ¸");
dictionary.set("garce", "ğŸŒ¸");
dictionary.set("gogole", "ğŸŒ¸");
dictionary.set("gonzesse", "ğŸŒ¸");
dictionary.set("gouine", "ğŸŒ¸");
dictionary.set("grognasse", "ğŸŒ¸");
dictionary.set("grosse vache", "ğŸŒ¸");
dictionary.set("hystÃ©rique", "ğŸŒ¸");
dictionary.set("macaque", "ğŸŒ¸");
dictionary.set("mal-baisÃ©", "ğŸŒ¸");
dictionary.set("mal-baisÃ©e", "ğŸŒ¸");
dictionary.set("mÃ©gÃ¨re", "ğŸŒ¸");
dictionary.set("nÃ¨gre", "ğŸŒ¸");
dictionary.set("nÃ©gresse", "ğŸŒ¸");
dictionary.set("nÃ©gro", "ğŸŒ¸");
dictionary.set("niakouÃ©", "ğŸŒ¸");
dictionary.set("niakouÃ©e", "ğŸŒ¸");
dictionary.set("niaquÃ©", "ğŸŒ¸");
dictionary.set("niaquÃ©e", "ğŸŒ¸");
dictionary.set("niaquouÃ©", "ğŸŒ¸");
dictionary.set("niaquouÃ©e", "ğŸŒ¸");
dictionary.set("nigga", "ğŸŒ¸");
dictionary.set("nigger", "ğŸŒ¸");
dictionary.set("nique", "ğŸŒ¸");
dictionary.set("nique ta mÃ¨re", "ğŸŒ¸");
dictionary.set("peau rouge", "ğŸŒ¸");
dictionary.set("pÃ©dale", "ğŸŒ¸");
dictionary.set("pÃ©dÃ©", "ğŸŒ¸");
dictionary.set("PD", "ğŸŒ¸");
dictionary.set("pÃ©tasse", "ğŸŒ¸");
dictionary.set("pimbÃªche", "ğŸŒ¸");
dictionary.set("pouffiasse", "ğŸŒ¸");
dictionary.set("pouffiasse", "ğŸŒ¸");
dictionary.set("putain", "ğŸŒ¸");
dictionary.set("putasse", "ğŸŒ¸");
dictionary.set("pute", "ğŸŒ¸");
dictionary.set("racoleuse", "ğŸŒ¸");
dictionary.set("retourne dans ton pays", "ğŸŒ¸");
dictionary.set("sale arabe", "ğŸŒ¸");
dictionary.set("sale bridÃ©", "ğŸŒ¸");
dictionary.set("sale juif", "ğŸŒ¸");
dictionary.set("sale juive", "ğŸŒ¸");
dictionary.set("sale musulman", "ğŸŒ¸");
dictionary.set("sale musulmane", "ğŸŒ¸");
dictionary.set("sale noir", "ğŸŒ¸");
dictionary.set("sale trans", "ğŸŒ¸");
dictionary.set("salope", "ğŸŒ¸");
dictionary.set("singe noir", "ğŸŒ¸");
dictionary.set("tafiole", "ğŸŒ¸");
dictionary.set("tantouze", "ğŸŒ¸");
dictionary.set("tapette", "ğŸŒ¸");
dictionary.set("tapineuse", "ğŸŒ¸");
dictionary.set("tarlouse", "ğŸŒ¸");
dictionary.set("tchoin", "ğŸŒ¸");
dictionary.set("teubÃ©", "ğŸŒ¸");
dictionary.set("toubab", "ğŸŒ¸");
dictionary.set("trainÃ©e", "ğŸŒ¸");
dictionary.set("travelo", "ğŸŒ¸");
dictionary.set("va manger du chien", "ğŸŒ¸");
dictionary.set("vieille-peau", "ğŸŒ¸");
dictionary.set("youpin", "ğŸŒ¸");
dictionary.set("youpine", "ğŸŒ¸");

browser.runtime.onMessage.addListener(addToDictionary);

let regexs = new Map();
for (let word of dictionary.keys()) {
  regexs.set(word, new RegExp(word + "[:space:]*", "gi"));
}

function addToDictionary(request) {
  console.log("avant if");
  if (request.color) {
    console.log("dans le if");
    dictionary.set(request.color, "ğŸŒ¸");
    regexs.set(
      request.color,
      //new RegExp("^" + request.color + "$" + "[:space:]*", "gi")
      new RegExp(request.color + "[:space:]*", "gi")
    );
    replaceText(document.body);
    console.log(request.color);
    console.log(regexs);
  }
}

function replaceText(node) {
  console.log("replace text");
  if (node.nodeType === Node.TEXT_NODE) {
    if (node.parentNode && node.parentNode.nodeName === "TEXTAREA") {
      return;
    }

    let content = node.textContent;

    for (let [word, emoji] of dictionary) {
      let regex = regexs.get(word);

      content = content.replace(regex, emoji);
    }
    console.log("regexs:" + regexs.size);
    console.log("dictionary:" + dictionary.size);

    node.textContent = content;
  } else {
    for (let i = 0; i < node.childNodes.length; i++) {
      replaceText(node.childNodes[i]);
    }
  }
}

replaceText(document.body);

const observer = new MutationObserver((mutations) => {
  mutations.forEach((mutation) => {
    if (mutation.addedNodes && mutation.addedNodes.length > 0) {
      for (let i = 0; i < mutation.addedNodes.length; i++) {
        const newNode = mutation.addedNodes[i];
        replaceText(newNode);
      }
    }
  });
});
observer.observe(document.body, {
  childList: true,
  subtree: true,
});
