/*
 * This file contains the Map of word --> emoji substitutions.
 */

/* exported sortedEmojiMap */

let dictionary = new Map();
dictionary.set("allumeuse", "ðŸŒ¸");
dictionary.set("babtou", "ðŸŒ¸");
dictionary.set("bamboula", "ðŸŒ¸");
dictionary.set("bÃ¢tard noir", "ðŸŒ¸");
dictionary.set("bÃ©casse", "ðŸŒ¸");
dictionary.set("bimbo", "ðŸŒ¸");
dictionary.set("blondasse", "ðŸŒ¸");
dictionary.set("bobonne", "ðŸŒ¸");
dictionary.set("bonasse", "ðŸŒ¸");
dictionary.set("boniche", "ðŸŒ¸");
dictionary.set("boucaque", "ðŸŒ¸");
dictionary.set("bouffeur de chiens", "ðŸŒ¸");
dictionary.set("bouffeuse de chiens", "ðŸŒ¸");
dictionary.set("bougnoule", "ðŸŒ¸");
dictionary.set("cagole", "ðŸŒ¸");
dictionary.set("catin", "ðŸŒ¸");
dictionary.set("chagnasse", "ðŸŒ¸");
dictionary.set("chaudasse", "ðŸŒ¸");
dictionary.set("chinetoque", "ðŸŒ¸");
dictionary.set("ching chong", "ðŸŒ¸");
dictionary.set("connard", "ðŸŒ¸");
dictionary.set("connasse", "ðŸŒ¸");
dictionary.set("crouille", "ðŸŒ¸");
dictionary.set("dÃ©bile", "ðŸŒ¸");
dictionary.set("donzelle", "ðŸŒ¸");
dictionary.set("enculÃ©", "ðŸŒ¸");
dictionary.set("enculer", "ðŸŒ¸");
dictionary.set("fais pas ta meuf", "ðŸŒ¸");
dictionary.set("fatma", "ðŸŒ¸");
dictionary.set("FDP", "ðŸŒ¸");
dictionary.set("fille de joie", "ðŸŒ¸");
dictionary.set("fille facile", "ðŸŒ¸");
dictionary.set("fille lÃ©gÃ¨re", "ðŸŒ¸");
dictionary.set("fils de pute", "ðŸŒ¸");
dictionary.set("fiotte", "ðŸŒ¸");
dictionary.set("garce", "ðŸŒ¸");
dictionary.set("gogole", "ðŸŒ¸");
dictionary.set("gonzesse", "ðŸŒ¸");
dictionary.set("gouine", "ðŸŒ¸");
dictionary.set("grognasse", "ðŸŒ¸");
dictionary.set("grosse vache", "ðŸŒ¸");
dictionary.set("hystÃ©rique", "ðŸŒ¸");
dictionary.set("macaque", "ðŸŒ¸");
dictionary.set("mal-baisÃ©", "ðŸŒ¸");
dictionary.set("mal-baisÃ©e", "ðŸŒ¸");
dictionary.set("mÃ©gÃ¨re", "ðŸŒ¸");
dictionary.set("nÃ¨gre", "ðŸŒ¸");
dictionary.set("nÃ©gresse", "ðŸŒ¸");
dictionary.set("nÃ©gro", "ðŸŒ¸");
dictionary.set("niakouÃ©", "ðŸŒ¸");
dictionary.set("niakouÃ©e", "ðŸŒ¸");
dictionary.set("niaquÃ©", "ðŸŒ¸");
dictionary.set("niaquÃ©e", "ðŸŒ¸");
dictionary.set("niaquouÃ©", "ðŸŒ¸");
dictionary.set("niaquouÃ©e", "ðŸŒ¸");
dictionary.set("nigga", "ðŸŒ¸");
dictionary.set("nigger", "ðŸŒ¸");
dictionary.set("nique", "ðŸŒ¸");
dictionary.set("nique ta mÃ¨re", "ðŸŒ¸");
dictionary.set("peau rouge", "ðŸŒ¸");
dictionary.set("pÃ©dale", "ðŸŒ¸");
dictionary.set("pÃ©dÃ©", "ðŸŒ¸");
dictionary.set("PD", "ðŸŒ¸");
dictionary.set("pÃ©tasse", "ðŸŒ¸");
dictionary.set("pimbÃªche", "ðŸŒ¸");
dictionary.set("pouffiasse", "ðŸŒ¸");
dictionary.set("pouffiasse", "ðŸŒ¸");
dictionary.set("putain", "ðŸŒ¸");
dictionary.set("putasse", "ðŸŒ¸");
dictionary.set("pute", "ðŸŒ¸");
dictionary.set("racoleuse", "ðŸŒ¸");
dictionary.set("retourne dans ton pays", "ðŸŒ¸");
dictionary.set("sale arabe", "ðŸŒ¸");
dictionary.set("sale bridÃ©", "ðŸŒ¸");
dictionary.set("sale juif", "ðŸŒ¸");
dictionary.set("sale juive", "ðŸŒ¸");
dictionary.set("sale musulman", "ðŸŒ¸");
dictionary.set("sale musulmane", "ðŸŒ¸");
dictionary.set("sale noir", "ðŸŒ¸");
dictionary.set("sale trans", "ðŸŒ¸");
dictionary.set("salope", "ðŸŒ¸");
dictionary.set("singe noir", "ðŸŒ¸");
dictionary.set("tafiole", "ðŸŒ¸");
dictionary.set("tantouze", "ðŸŒ¸");
dictionary.set("tapette", "ðŸŒ¸");
dictionary.set("tapineuse", "ðŸŒ¸");
dictionary.set("tarlouse", "ðŸŒ¸");
dictionary.set("tchoin", "ðŸŒ¸");
dictionary.set("teubÃ©", "ðŸŒ¸");
dictionary.set("toubab", "ðŸŒ¸");
dictionary.set("trainÃ©e", "ðŸŒ¸");
dictionary.set("travelo", "ðŸŒ¸");
dictionary.set("va manger du chien", "ðŸŒ¸");
dictionary.set("veille-peau", "ðŸŒ¸");
dictionary.set("youpin", "ðŸŒ¸");
dictionary.set("youpine", "ðŸŒ¸");

/*
 * After all the dictionary entries have been set, sort them by length.
 *
 * Because iteration over Maps happens by insertion order, this avoids
 * scenarios where words that are substrings of other words get substituted
 * first, leading to the longer word's substitution never triggering.
 *
 * For example, the 'woman' substitution would never get triggered
 * if the 'man' substitution happens first because the input term 'woman'
 * would become 'woðŸ‘¨', and the search for 'woman' would not find any matches.
 */
let tempArray = Array.from(dictionary);
tempArray.sort((pair1, pair2) => {
  // Each pair is an array with two entries: a word, and its emoji.
  // Ex: ['woman', 'ðŸ‘©']
  const firstWord = pair1[0];
  const secondWord = pair2[0];

  if (firstWord.length > secondWord.length) {
    // The first word should come before the second word.
    return -1;
  }
  if (secondWord.length > firstWord.length) {
    // The second word should come before the first word.
    return 1;
  }

  // The words have the same length, it doesn't matter which comes first.
  return 0;
});

// Now that the entries are sorted, put them back into a Map.
let sortedEmojiMap = new Map(tempArray);
